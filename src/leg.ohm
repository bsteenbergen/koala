leg {
    Program = Stmt+
    
    Stmt = Print
    	| VarDecl
        | FunDecl
        | VarAssign 
        | FunCall
        | IfStmt
        | Instruction
        | Exp         
        
    Print = print Exp

    VarDecl = decl Type id Exp 
    VarAssign = asgn id Exp
    FunDecl = funcName ":" Suite
    FunCall = (branch | branchLink) funcName (Exp)?
    
    Instruction = cmp (ListOf<Exp5, "">) --cmp
    		| add (ListOf<Exp5, "">) --add
                | sub (ListOf<Exp5, "">) --sub
    
    Suite   = Stmt* "#"
        
    Type = int | float | str | bool | bin | "[" Type "]" --arr
    
    IfStmt  = if Exp ":" Suite (else ":" Suite)?
                
    Exp     = Exp "||" Exp0           --or
            | Exp "&&" Exp0           --and
            | Exp0
    Exp0    = Exp0 relop Exp1                  --binary
            | Exp1 
    Exp1    = logicop Exp2                --unary     
            | Exp2
    Exp2    = Exp2 ("+" | "-") Exp3            --binary
            | Exp3
    Exp3    = Exp3 ("*" | "/") Exp4            --binary
            | Exp5 "%" Exp5                    --modulo
            | Exp4
    Exp4    = Exp5 "^" Exp4                   --binary
            | Exp5      
    Exp5    = boollit
            | binlit
            | floatlit
            | intlit
            | strlit
            | LegArray
            | id                                            --id
    
    keyword =  print | true | false | int | float | bool | array
            |  branch | branchLink | if | cmp | decl
            | add | sub | else | bin | decl | asgn

    strlit = "\"" char* "\""
    intlit = ("-")? digit+
    floatlit = ("-")? digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)?
    boollit = true | false
    binlit = ("0" | "1")+ "b"
    

    LegArray = "[" ListOf<Exp, ","> "]"
    
    logicop = "!"
    relop   = ("<=" | "<" | "!=" | "==" | ">=" | ">")

    print = "prt" ~idchar
    true = "true" ~idchar
    false = "false" ~idchar
    funcName = "#" id ~idchar
    branch = "b" ~idchar 
    branchLink = "bl" ~idchar
    cmp = "cmp" ~idchar
    decl = "decl" ~idchar
    asgn = "asgn" ~idchar
    add = "add" ~idchar
    sub = "sub" ~idchar
    if = "#if" ~idchar
    else = "else" ~idchar
    in = "in" ~idchar
    loop = "#loop" ~idchar
    array = "array" ~idchar
    str = "str" ~idchar
    int = "int" ~idchar
    float = "float" ~idchar
    bool = "bool" ~idchar
    bin = "bin" ~idchar
  
    

    idchar = "_" | alnum
    id  = ~keyword letter idchar*


        
    char = ~"\"" ~"\n" any 
    space += "@" (~"\n" any)* --comment
}