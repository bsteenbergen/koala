leg {
    Program = Stmt+
    
    Stmt = Print
    	| VarDecl
        | FunDecl
        | VarAssign 
        | FunCall
        | IfStmt
        | Instruction
        | Exp         
        
    Print = print Exp

    VarDecl = Type id "=" Exp 
    VarAssign = id "=" Exp
    FunDecl = funcName ":" Suite
    FunCall = (branch | branchLink) funcName (Exp)?
    
    Instruction = cmp (ListOf<Exp5, "">) --cmp
    		| add (ListOf<Exp5, "">) --add
                | sub (ListOf<Exp5, "">) --sub
    
    Suite   = Stmt* "#"
        
    Type = "int" | "float" | "str" | "bool" | "list"
    
    IfStmt  = if Exp ":" Suite (else ":" Suite)?
                
    Exp     = Exp "||" Exp0           --or
            | Exp "&&" Exp0           --and
            | Exp0
    Exp0    = Exp0 relop Exp1                  --binary
            | Exp1 
    Exp1    = logicop Exp2                --unary     
            | Exp2
    Exp2    = Exp2 ("+" | "-") Exp3            --binary
            | Exp3
    Exp3    = Exp3 ("*" | "/") Exp4            --binary
            | Exp5 "%" Exp5                    --modulo
            | Exp4
    Exp4    = Exp5 "^" Exp4                   --binary
            | Exp5      
    Exp5    = bool
            | float
            | int
            | str
            | List
            | id                                            --id
    
    keyword = print | true | false | int | float | bool 
            | list |  branch | branchLink | if | cmp 
            | add | sub | else
    id      = ~keyword letter+ "_"? id? alnum*

    str = "\"" char* "\""
    int = ("-")? digit+
    float = ("-")? digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)?
    bool = true | false
    List = "[" ListOf<Exp, ","> "]"
    
    logicop = ("!&" | "!|" | "!")
    relop   = ("<=" | "<" | "!=" | "==" | ">=" | ">")

    print = "prt" ~alnum
    true = "true" ~alnum
    false = "false" ~alnum
    funcName = "#" id ~alnum
    branch = "b" ~alnum 
    branchLink = "bl" ~alnum
    cmp = "cmp" ~alnum
    add = "add" ~alnum
    sub = "sub" ~alnum
    if = "#if" ~alnum
    else = "else" ~alnum
    in = "in" ~alnum
    loop = "#loop" ~alnum
    list = "list" ~alnum
        
    char = ~"\"" ~"\n" any 
    space += "@" (~"\n" any)* --comment
}