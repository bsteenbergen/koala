mum {
    Program = Stmt+
    
    Stmt = Print
    	| VarDecl
        | FunDecl 
        | FunCall
        | IfStmt
        | LoopStmt
        | Instruction
        | Exp         
        
    Print = print Exp

    VarDecl = Type id "=" Exp 
    FunDecl = funcName ":" Suite
    FunCall = branch funcName | branchLink funcName
    
    Instruction = cmp (ListOf<Exp, "">) --cmp
    
    Suite   = Stmt* "#"
        
    Type = "int" | "float" | "str" | "bool"
    
    IfStmt  = if Exp ":" Suite
    LoopStmt= loop ":" Suite if Exp "->" loop          --while
    		//| loop id in Exp ":" Suite "->" loop              --for
    
    //Exp = id | float | int | str | bool
            
    Exp     = Exp "||" Exp0           --or
            | Exp "&&" Exp0           --and
            | Exp0
    Exp0    = Exp0 relop Exp1                  --binary
            | Exp1 
    Exp1    = Exp1 logicop Exp2                --binary      
            | Exp2
    Exp2    = Exp2 ("+" | "-") Exp3            --binary
            | Exp3
    Exp3    = Exp3 ("*" | "/") Exp4            --binary
            | Exp5 "%" Exp5                    --modulo
            | Exp4
    Exp4    = Exp5 "^" Exp4                   --binary
            | Exp5      
    Exp5    = bool
            | float
            | int
            | str
            | id                                            --id
    
    keyword = print | true | false | branch | branchLink | if | cmp
    id      = ~keyword letter+ "_"? id? alnum*

    str = "\"" char* "\""
    int = ("-")? digit+
    float = ("-")? digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)?
    bool = true | false
    logicop = ("!&" | "!|" | "!")
    relop   = ("<=" | "<" | "!=" | "==" | ">=" | ">")

    print = "mumble" ~alnum
    true = "true" ~alnum
    false = "false" ~alnum
    funcName = "#" id ~alnum
    branch = "b" ~alnum 
    branchLink = "bl" ~alnum
    cmp = "cmp" ~alnum
    if = "#if" ~alnum
    in = "in" ~alnum
    loop = "#loop" ~alnum
        
    char = ~"\"" ~"\n" any 
    space += "@" (~"\n" any)* --comment
}