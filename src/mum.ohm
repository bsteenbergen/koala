mum {

  Program = Stmt+
  Stmt    = "mumble" Exp                                     --print
          | Type id "=" Exp                                  --vardec
          | List
          | Map
          | id "=" Exp                                       --assignment
          | FunDecl
          | "loop" Control ":" Suite                         --loop 
          | IfStmt ("else" ":" (Suite | IfStmt))?            --if
          | Exp

  FunDecl = "task" id Params ("yields" Exp) (":" Suite)?

  Params  = ("(" ListOf<Param, ","> ")")?
  Param   = Type id
  Args    = "(" ListOf<Exp, ","> ")"
  Suite   = Stmt* "end" 
  Control = "until" Exp
  
  IfStmt  = "if" Exp ":" Stmt* ("elseif" Exp ":" Stmt*)*
  
  Type    = "bool"
          | "str"
          | "num"
          
  TypeLit = num
          | str
          | bool
          | id  // this is here for now but i dont think we want it here forever
          
  Map     = "Map" id "=" "{" ListOf<MapType, ","> "}"
  MapType = TypeLit "->" TypeLit
  List    = "List" id "=" "[" ListOf<TypeLit, ","> "]"
          
  Keyword = "end"
          | "if"
          | "else"
          | "elseif"
          | "loop"
          | "until"
          | "task"
          | "yields"
          | "true"
          | "false"
  
  Exp     = Exp "||" Exp0                                  --or
          | Exp "&&" Exp0                                  --and
          | Exp0
  Exp0    = Exp0 relop Exp1                                --binary
          | Exp1 
  Exp1    = Exp1 logicop Exp2                              --binary  
          | logicop Exp2                                   --beforeexp
          | Exp2
  Exp2    = Exp2 ("+=" | "-=" | "+" | "-") Exp3            --binary
          | Exp3
  Exp3    = Exp3 ("*" | "/") Exp4                          --binary
  	  | "rem" Exp3 "/" Exp4                            --modulo
          | Exp4
  Exp4    = Exp5 "^" Exp4                                  --binary
          | Exp5      
  Exp5   = num                      
          | id Args                                        --call
          | id
          | str
          | "(" Exp ")"                                    --parens
      
  num     = digit+ ("." digit+)?
  id      = (~Keyword) letter ("_" | letter | digit)*
  str     = "\"" (~"\\" ~"\"" ~"\n" any)* "\""
  bool    = "true" | "false"
  logicop = ("!&" | "!|" | "!")
  relop   = ("<=" | "<" | "!=" | "==" | ">=" | ">")
  
  space   += "//" (~"\n" any)* ("\n" | end)  --comment
}